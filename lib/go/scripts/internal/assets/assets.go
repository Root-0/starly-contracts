// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../scripts/flow/read_balance.cdc (453B)
// ../../../scripts/fusd/read_balance.cdc (432B)
// ../../../scripts/fusd/read_supply.cdc (167B)
// ../../../scripts/starlyCard/read_collection_ids.cdc (509B)
// ../../../scripts/starlyCard/read_collection_length.cdc (513B)
// ../../../scripts/starlyCard/read_starly_id.cdc (770B)
// ../../../scripts/starlyCard/read_supply.cdc (186B)
// ../../../scripts/starlyCardMarket/read_collection_ids.cdc (560B)
// ../../../scripts/starlyCardMarket/read_collection_length.cdc (563B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _flowRead_balanceCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\xcb\x6e\xf2\x30\x14\x84\xf7\x7e\x8a\x11\x8b\xff\x0f\x9b\xa4\x8b\xaa\x0b\xd4\x16\x71\x4b\x55\x15\x81\xc4\xa5\x5d\x3b\xc9\x31\x58\x35\x76\xe4\x4b\xa1\x42\xbc\x7b\x45\x6e\x2d\x5e\x59\xf2\x7c\xe3\x99\x73\x92\x04\x9b\xbd\x74\x70\xb9\x95\xa5\x87\x25\x5e\x38\xf8\x3d\x21\xe3\x8a\xeb\x9c\x20\x24\xa9\x02\x46\x80\x6b\xf0\x3c\x37\x41\xfb\xff\x0e\xa9\x32\xc7\x8d\xf9\x24\x8d\x71\xad\x63\x4c\x1e\x4a\x63\x3d\xd2\xa0\x77\x32\x53\x54\xbf\x0a\x6b\x0e\xb8\x3b\xa5\xdb\xc5\xcb\xeb\x78\x3e\xdb\x2c\xdf\x66\x8b\xd1\x74\xba\x9a\xad\xd7\x1d\xd0\x59\xb5\xe2\xf9\xf2\xe3\x46\xc8\xca\x90\x41\x04\x8d\x03\x97\x3a\x6a\x42\x0c\x30\x2a\x0a\x4b\xce\xf5\x07\xd8\xa6\xf2\xf4\x70\x8f\x33\x63\x00\xa0\xc8\xe3\x8b\x07\xe5\x57\x24\xf0\x84\x1d\xf9\x51\x8d\xb4\x68\xbf\x92\x5d\x4f\xbc\x23\x3f\xe1\x25\xcf\xa4\x92\xfe\x3b\x4a\xca\x90\x29\x99\x27\xa2\x8d\xd4\x94\xfb\x03\x64\xc6\x5a\x73\x7c\xfc\xd7\xa5\x8e\xdf\xaf\x5f\x9d\x6f\x6a\xc7\x0d\x77\x79\x8e\x7e\xd1\xe1\x10\x25\xd7\x32\x8f\x7a\x13\x13\x54\x01\x6d\x3c\x6a\xb7\x76\x86\xb0\x24\xc8\xd2\xf5\xe6\x4d\xb5\x84\xca\xbb\xd7\xaf\x7b\x59\xf2\xc1\xea\xae\x5a\xdc\x6c\x88\x5d\xd8\x4f\x00\x00\x00\xff\xff\x38\x9b\x14\x49\xc5\x01\x00\x00"

func flowRead_balanceCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowRead_balanceCdc,
		"flow/read_balance.cdc",
	)
}

func flowRead_balanceCdc() (*asset, error) {
	bytes, err := flowRead_balanceCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "flow/read_balance.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xeb, 0x3, 0xd9, 0xd3, 0xc5, 0xf4, 0x33, 0xcb, 0xf, 0x2c, 0xdd, 0x7f, 0x8f, 0xa6, 0x25, 0xa7, 0x5e, 0xce, 0x4c, 0x9f, 0xad, 0x8c, 0x3b, 0xa5, 0x1f, 0xbf, 0x1a, 0x3c, 0xe2, 0xdb, 0xa8, 0xda}}
	return a, nil
}

var _fusdRead_balanceCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x4f\x4f\xc2\x30\x18\xc6\xef\x4b\xf6\x1d\x1e\x39\xe8\x76\xd9\x3c\x18\x0f\x44\x24\xc0\xc0\x18\x0d\x26\x0c\xbc\x77\xdb\x3b\x68\x2c\xed\xd2\x3f\x8a\x21\x7c\x77\x53\xcb\x30\xf6\xf4\x36\x7d\x7e\xbf\x3e\x79\xf9\xbe\x53\xda\x62\xe1\xe4\x96\x57\x82\xd6\xea\x83\x24\x5a\xad\xf6\xb8\x3d\x2c\x36\xcb\xa7\xe7\xe9\xeb\x7c\xfd\xf6\x32\x5f\x4e\x8a\x62\x35\x2f\xcb\x38\xea\x89\x4d\x59\xfc\x05\xcb\xe2\xf2\x1e\x47\x79\x8e\xf5\x8e\x1b\x98\x5a\xf3\xce\x42\x93\x75\x5a\x1a\x30\x09\x56\xd7\xca\x49\x7b\x63\x02\x5e\x31\xc1\x64\x4d\x99\x87\x3a\x57\xa1\x75\x12\x7b\xc6\x65\xc2\x9a\x46\x93\x31\x43\x4c\xc2\x90\x0e\xb1\x59\xf0\xc3\xfd\x1d\x8e\x71\x04\x00\x82\x6c\x2f\xc3\x08\x5b\xb2\x93\x70\xe9\xc9\xd4\x2b\xfb\xe0\x27\x73\xc2\xae\xa8\xc5\xa8\x67\xb2\x2d\xd9\x19\xeb\x58\xc5\x05\xb7\xdf\x49\xde\xb9\x4a\xf0\x3a\x6f\x9d\x69\xa6\xa1\x53\x7a\x95\x55\x4a\x6b\xf5\xf5\x70\xed\xab\x66\xef\xde\x71\xfc\xb7\xa6\xec\x1c\x3d\x3d\x26\x69\xf8\xcc\x9f\xf1\x18\x1d\x93\xbc\x4e\x06\x33\xe5\x44\x03\xa9\x2c\x82\x09\xe7\x3c\x34\xb5\xa4\xc9\x4f\x56\xc1\xee\x08\xbf\xf2\xc1\xa5\x73\x58\xd8\xa5\x76\x76\x5e\x53\x1c\x9d\xe2\xe8\x27\x00\x00\xff\xff\x27\x6c\xc6\xb0\xb0\x01\x00\x00"

func fusdRead_balanceCdcBytes() ([]byte, error) {
	return bindataRead(
		_fusdRead_balanceCdc,
		"fusd/read_balance.cdc",
	)
}

func fusdRead_balanceCdc() (*asset, error) {
	bytes, err := fusdRead_balanceCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fusd/read_balance.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe4, 0xfe, 0xbc, 0xac, 0x8f, 0x59, 0xbe, 0x58, 0xb5, 0x7, 0xa5, 0xff, 0x77, 0x41, 0xa0, 0xfd, 0xc8, 0xb7, 0x3d, 0xa8, 0x68, 0xbb, 0xcb, 0x62, 0xbe, 0xca, 0x8c, 0xfe, 0xd5, 0x3e, 0x2, 0x7a}}
	return a, nil
}

var _fusdRead_supplyCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcc\x31\x0a\xc2\x30\x14\x06\xe0\x3d\x90\x3b\xfc\xa3\x2e\xad\x83\x38\xb8\x09\xb5\x07\x30\xf6\x00\xb5\xa4\xf4\x41\xf3\x12\x5e\x5e\xa0\x45\xbc\xbb\xb4\xba\x7d\xd3\x47\x21\x45\x51\xb4\x9d\x6b\x30\x4a\x0c\x38\x2d\x9b\x6f\x4d\xf3\xb8\x3b\x67\x8d\x35\x75\x8d\xe7\x44\x19\x79\x10\x4a\x0a\xf1\x5a\x84\x33\x74\xf2\xd0\xa8\xfd\x8c\x3e\xc4\xc2\x8a\x38\xfe\x96\xa1\x88\x78\xd6\x79\x05\x31\xfc\x42\x59\x3d\x0f\xbe\xda\xaa\x54\x5e\x18\x0b\x23\xf4\xc4\x87\xe3\x15\x5d\x4b\xcb\xe5\x8c\xb7\x35\x00\xfe\xf3\x9e\x54\xfb\xec\x4a\x4a\xf3\x6a\xcd\xc7\x9a\x6f\x00\x00\x00\xff\xff\x99\x9d\x01\xfd\xa7\x00\x00\x00"

func fusdRead_supplyCdcBytes() ([]byte, error) {
	return bindataRead(
		_fusdRead_supplyCdc,
		"fusd/read_supply.cdc",
	)
}

func fusdRead_supplyCdc() (*asset, error) {
	bytes, err := fusdRead_supplyCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fusd/read_supply.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x13, 0x1e, 0x46, 0x58, 0x34, 0x2f, 0xae, 0xa2, 0x74, 0x38, 0x70, 0x1a, 0x64, 0x6d, 0xe8, 0x11, 0x4, 0x70, 0x23, 0x97, 0xae, 0xae, 0xe2, 0xea, 0x7, 0xf, 0x1a, 0x79, 0x8f, 0xf5, 0xc5, 0xf1}}
	return a, nil
}

var _starlycardRead_collection_idsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xcf\x8e\x9b\x30\x18\xc4\xef\x48\xbc\xc3\x34\x87\x16\x2e\xa4\x87\xaa\x87\xa8\x69\x44\x21\xa9\xd0\x46\x24\x02\x72\x58\xad\xf6\x60\x8c\x49\xac\x75\x6c\x64\x1b\xed\x46\x51\xde\x7d\x45\x58\xc8\xfe\xf1\xc9\x96\xbf\xdf\xcc\x37\xc3\x8f\x8d\xd2\x16\xa9\x92\xab\x56\xee\x79\x29\x58\xa1\x9e\x98\x44\xad\xd5\x11\x3f\x5f\xd2\x4d\xba\xda\xa5\xff\x93\x7f\xeb\x65\xb1\xb9\x5b\xa6\x61\x1c\x67\xcb\x3c\x77\x9d\x37\x2e\xb7\x44\x8b\x53\x44\x74\x35\x10\x79\x11\x66\xeb\xfb\x28\xcc\xe2\x71\xd6\x75\xa6\x53\x14\x07\x6e\x60\xa8\xe6\x8d\x85\x66\xb6\xd5\xd2\x80\x48\x10\xad\xc9\x09\xaa\x06\x11\x02\xf6\xc0\x90\xae\x0a\x24\xb1\x01\x97\xd7\x6f\x4a\x55\x2b\xed\x0f\x03\xaa\x84\x60\xd4\x72\x25\x83\x4e\xb1\x69\x4b\xd4\xad\xc4\x91\x70\xe9\x91\xaa\xd2\xcc\x98\x19\xc2\xfe\xe2\xcf\xf0\xb0\x4b\xa4\xfd\xfd\xeb\x11\x67\xd7\x01\x00\xc1\xec\x20\x86\x39\xf6\xcc\x86\xfd\x63\x60\xfd\x4e\x74\x18\xbc\x79\x65\xac\xc6\x7c\x00\x83\x3d\xb3\x11\x69\x48\xc9\x05\xb7\x27\xef\x96\x3d\x88\x46\x60\xdb\x96\x82\xd3\x2d\xb1\x07\xff\x5b\x50\x2a\xad\xd5\xf3\x9f\xef\xe7\xcf\xf5\x7e\x01\x2e\x7f\x3d\xbf\xf7\xef\xce\x62\x81\x86\x48\x4e\xbd\x49\xa4\x5a\x51\x41\x2a\x8b\x5e\x0b\x74\xf4\xef\x0b\x6f\xae\xf8\xbb\x8d\x27\x63\x92\xbe\xe5\x8f\x61\xba\x08\x49\x6c\x3a\xb3\x8b\xeb\xbc\x06\x00\x00\xff\xff\xf4\xc3\x76\x58\xfd\x01\x00\x00"

func starlycardRead_collection_idsCdcBytes() ([]byte, error) {
	return bindataRead(
		_starlycardRead_collection_idsCdc,
		"starlyCard/read_collection_ids.cdc",
	)
}

func starlycardRead_collection_idsCdc() (*asset, error) {
	bytes, err := starlycardRead_collection_idsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "starlyCard/read_collection_ids.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xca, 0x87, 0x1e, 0x31, 0x96, 0x4d, 0x6e, 0xad, 0xd5, 0x12, 0x91, 0xff, 0xd8, 0xfe, 0x31, 0x50, 0x42, 0xa5, 0x27, 0x59, 0x4b, 0xfb, 0xba, 0x62, 0x11, 0x5f, 0xfa, 0xe0, 0xb5, 0xf5, 0x42, 0xe3}}
	return a, nil
}

var _starlycardRead_collection_lengthCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x51\x4f\xb3\x30\x14\x86\xef\x49\xf8\x0f\xe7\xdb\xc5\x27\xdc\x30\xaf\x17\xe7\x82\xb0\x99\xc5\x85\x2d\x80\x17\x5e\x96\x52\xa0\xb1\x6b\x49\x7b\x1a\x9d\xcb\xfe\xbb\x41\x04\xa6\xf6\xaa\x4d\xce\xf3\xf4\xbc\x2f\x3f\xb6\x4a\x23\x24\x4a\x6e\xac\xac\x79\x21\x58\xae\x5e\x99\x84\x4a\xab\x23\xdc\xbe\x27\xfb\x64\xf3\x9c\x3c\x6e\x1f\x76\xeb\x7c\xff\xb4\x4e\xc2\x38\x4e\xd7\x59\xe6\x3a\xdf\x5c\x86\x44\x8b\x53\x44\x74\x39\x10\x59\x1e\xa6\xbb\x97\x28\x4c\xe3\x71\xd6\x75\xe6\x73\xc8\x1b\x6e\xc0\x50\xcd\x5b\x04\xcd\xd0\x6a\x69\x00\x1b\x06\x86\x7f\x30\x50\x15\x10\x09\x84\x52\x65\x25\xde\x98\x6b\x2d\x55\x42\x30\x8a\x5c\xc9\xa0\x33\xb5\xb6\x80\xca\x4a\x38\x12\x2e\x3d\x52\x96\x9a\x19\xb3\x80\xb0\xbf\xf8\x0b\xd8\x4a\x84\xb3\xeb\x00\x00\x08\x86\x83\x12\x96\x50\x33\x0c\xfb\xc7\x80\xf9\x9d\x6f\x18\x9c\xbe\x49\x59\x05\xcb\x01\x0c\x6a\x86\x11\x69\x49\xc1\x05\xc7\x93\x37\xed\x15\x44\x23\x70\xb0\x85\xe0\xf4\x40\xb0\xf1\xff\xf5\xc2\xee\x04\x85\xd2\x5a\xbd\xdd\xfd\x3f\xff\xee\xf6\x0f\x7a\xb9\xf7\xfc\x09\x5c\xad\xa0\x25\x92\x53\x6f\x16\x29\x2b\x4a\x90\x0a\xa1\x77\x01\x1d\x37\xe9\xdb\x6e\xbf\xf0\xab\xdd\x67\x63\xa6\xbe\xe2\x9f\xb1\xba\x30\xdb\xd8\x78\x7e\x20\x98\xac\xb1\x71\x9d\x8b\xeb\x7c\x06\x00\x00\xff\xff\x27\xe8\xd1\xff\x01\x02\x00\x00"

func starlycardRead_collection_lengthCdcBytes() ([]byte, error) {
	return bindataRead(
		_starlycardRead_collection_lengthCdc,
		"starlyCard/read_collection_length.cdc",
	)
}

func starlycardRead_collection_lengthCdc() (*asset, error) {
	bytes, err := starlycardRead_collection_lengthCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "starlyCard/read_collection_length.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9a, 0xe4, 0x3b, 0x76, 0xa6, 0x4e, 0x66, 0xfc, 0xe6, 0x6f, 0x70, 0x3f, 0x5a, 0xb9, 0x86, 0x1a, 0x82, 0xb1, 0xcc, 0x6, 0x21, 0x70, 0xcd, 0x47, 0xf9, 0x87, 0xe2, 0xda, 0x67, 0xee, 0x1b, 0xc5}}
	return a, nil
}

var _starlycardRead_starly_idCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x5f\x6f\x9b\x30\x14\xc5\xdf\x23\xe5\x3b\x9c\xf5\x61\x0b\xd2\x44\xf6\x30\xed\x21\x5a\x56\x51\x48\xa6\x68\x15\xad\x02\x7d\xd8\xa3\x31\x26\xf1\x06\x36\xb2\x2f\xea\xaa\xaa\xdf\x7d\x32\x86\x3a\xda\x1f\x9e\x2e\xf2\xfd\x9d\x7b\xee\xb1\x65\xd7\x6b\x43\xc8\xb5\xda\x0f\xea\x24\xab\x56\x94\xfa\xa7\x50\x68\x8c\xee\xf0\xe1\x57\x7e\x97\xef\x1f\xf2\xaf\x87\x9b\xdb\x5d\x79\xf7\x6d\x97\x27\x59\x76\xdc\x15\xc5\x72\x31\x71\x05\x31\xd3\x3e\xa5\xcc\xd4\x33\x51\x94\xc9\xf1\xf6\x7b\x9a\x1c\xb3\xd7\xde\xe5\x62\xbd\x46\x79\x96\x16\x96\x1b\xd9\x13\x8c\xa0\xc1\x28\x0b\x3a\x0b\x74\x82\x58\xcd\x88\xa1\xd1\x06\x4c\x21\xdf\x97\x90\xca\x55\x8c\x73\x3d\x28\x7a\x67\xc1\x75\xdb\x0a\x4e\x52\xab\xd8\xa9\xf5\x43\x85\x66\x50\xe8\x98\x54\x2b\x56\xd7\x46\x58\xbb\x41\xe2\x8b\xf7\x90\x24\xba\x43\xb6\xc1\xc3\x41\xd1\xa7\x8f\xd1\x06\x05\x19\xa9\x4e\x78\x76\x2c\x00\xac\xd7\x38\x09\x1a\xa7\xf7\x43\xd5\x4a\x3e\x8f\x82\xae\x7e\x08\x4e\xa3\x15\x77\x4a\x63\x14\xfa\x51\x09\xe3\xc9\x56\x90\xff\xc5\xd6\x49\x24\x1e\x9b\x3d\x44\xf3\x00\xd7\x16\x3c\xdf\x68\x63\xf4\x23\xb6\x9e\x8c\x4f\x82\x52\xd6\xb3\x4a\xb6\x92\x9e\x56\x21\xc0\x38\x7d\x25\xee\x47\x57\xf7\x8c\xce\xd1\x1b\xaf\xe8\xbe\xb8\x1a\x85\x3e\xbf\x7d\xbe\x80\x42\xf9\x27\xfe\xf2\x65\x15\x05\xf8\xfa\x1a\x3d\x53\x92\xaf\xae\x52\x3d\xb4\x35\x94\x26\x78\x3d\xfc\x5f\xe2\x2a\xba\x88\x6c\xea\x66\x30\xa2\x11\x46\x28\xee\xf2\x01\x83\xed\x05\x97\x8d\xe4\xf3\xcd\xb9\xe0\xc2\xf2\x21\x10\x1b\x9e\xca\xf6\xaf\x74\xa6\xdd\x82\x95\x95\xac\x37\xd3\x4d\xfe\x73\x8b\x5c\xc3\x0e\xfc\x3c\xb5\xf8\xb9\xec\x32\xf5\xe0\xdd\xbf\xb6\x8b\xf9\xb1\x2f\x0f\xd9\x72\xf1\xb2\x5c\xfc\x0e\x00\x00\xff\xff\xfe\x74\xce\x7d\x02\x03\x00\x00"

func starlycardRead_starly_idCdcBytes() ([]byte, error) {
	return bindataRead(
		_starlycardRead_starly_idCdc,
		"starlyCard/read_starly_id.cdc",
	)
}

func starlycardRead_starly_idCdc() (*asset, error) {
	bytes, err := starlycardRead_starly_idCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "starlyCard/read_starly_id.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xda, 0xc, 0x56, 0x21, 0xc0, 0xa6, 0x59, 0x80, 0xc3, 0xe9, 0x6, 0x75, 0x90, 0x86, 0x69, 0xc7, 0x47, 0x2e, 0xc1, 0x67, 0xe8, 0x5f, 0x78, 0x81, 0xac, 0x1a, 0xe4, 0x78, 0x1f, 0x7d, 0x6, 0x7d}}
	return a, nil
}

var _starlycardRead_supplyCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcc\x31\x6a\xc3\x30\x14\x06\xe0\x5d\xa0\x3b\xfc\x63\xbb\xd8\x1d\x4a\x87\x6e\xc6\xee\x50\xe8\x64\xb9\x43\x46\xd9\x91\xb1\x40\x7a\x12\x4f\x4f\x60\x13\x72\xf7\x10\xc8\xe0\x0b\x7c\x3e\xe6\xc4\x02\x23\x96\xc3\xd1\x5b\xbe\x62\xe5\x14\xf1\xb1\x9b\xa9\x1b\xff\x2e\x7d\x37\x0e\xdd\x30\x8c\x3f\xc6\x68\xa5\x55\xdb\x62\xda\x7c\x41\x59\xd8\x67\x29\x60\x27\x95\xa9\x40\x36\x07\xaa\x71\x76\x8c\xb4\x9e\xb1\xa5\x32\x3b\x92\x70\xc0\x13\xdc\xee\x8b\x38\x5a\x5c\xf3\xb4\x72\x9d\xb1\x56\x42\xb4\x9e\xde\xde\xbf\xf1\xff\x4b\xf2\xf5\x89\x9b\x56\x00\x5e\xf2\x89\x6a\x24\x89\x0d\xa6\xe6\x1c\x0e\xad\xee\x5a\x3d\x02\x00\x00\xff\xff\x13\xb2\xf2\x56\xba\x00\x00\x00"

func starlycardRead_supplyCdcBytes() ([]byte, error) {
	return bindataRead(
		_starlycardRead_supplyCdc,
		"starlyCard/read_supply.cdc",
	)
}

func starlycardRead_supplyCdc() (*asset, error) {
	bytes, err := starlycardRead_supplyCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "starlyCard/read_supply.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdf, 0x1d, 0x22, 0xbb, 0x67, 0x68, 0x90, 0xf6, 0x73, 0x78, 0x66, 0x3f, 0x1d, 0x1b, 0x5c, 0xa, 0xc2, 0x71, 0xd6, 0x44, 0x92, 0x4c, 0x89, 0xf4, 0xef, 0x24, 0x7, 0x8a, 0x98, 0x1f, 0x8, 0x53}}
	return a, nil
}

var _starlycardmarketRead_collection_idsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x51\x41\x4b\xf3\x40\x14\xbc\x07\xf2\x1f\x86\x1e\xbe\x2f\xbd\xb4\xdf\xe1\xc3\x43\x51\x4b\x48\x2a\x14\xad\x96\x24\x1e\x44\x3c\x6c\x92\x4d\xbb\xb8\xd9\x0d\x6f\x5f\xd0\x52\xfa\xdf\x25\x4d\x6d\x8b\x88\xbe\x53\x78\x79\x33\xb3\x33\xa3\xea\xc6\x12\x23\x65\x41\x7a\x13\x09\x2a\x17\x82\x5e\x25\xa3\x22\x5b\xe3\xdf\x7b\x9a\x85\xc9\xdd\x53\x14\x26\xf1\x22\x4c\x6e\x67\x59\x18\xc7\xc9\x2c\x4d\x7d\xcf\xf7\xc6\x63\x64\x6b\xe5\xe0\x0a\x52\x0d\x83\x24\xb7\x64\x1c\x84\x81\x20\x12\x1b\xd8\x0a\x42\x6b\xf0\x5a\xe2\xfe\x26\xc3\x3c\x76\xa8\x2c\xc1\x09\x2d\xf7\x60\x65\xf6\xb7\x45\x61\x5b\xc3\x7f\x1d\x52\xa1\xe5\x43\x55\x49\x42\x61\xb5\x96\x05\x2b\x6b\x46\x9d\x50\xd3\xe6\xa8\x5a\x83\x5a\x28\x13\x88\xb2\x24\xe9\xdc\x04\x61\xff\x31\x9c\xe0\xf9\x71\x6e\xf8\xe2\xff\x0b\xb6\xbe\x07\x00\x5a\x32\xea\xbd\x8b\xe8\x48\x94\xc8\x0a\x57\x58\x49\x0e\x7b\xbd\x4f\x9e\x61\x0f\xe9\x66\xb4\x92\x1c\x89\x46\xe4\x4a\x2b\xde\x5c\xfe\xf9\x1a\xc9\xe8\xc4\xb6\xfd\xe1\xdf\xb2\xcd\xb5\x2a\x76\xd7\xc1\x89\xb9\x9b\x5f\x11\x4b\xc1\xeb\x13\xe4\xfc\x5d\xb9\x25\xb2\x6f\xc1\xd9\x6a\x3a\x45\x23\x8c\x2a\x82\x41\x64\x5b\x5d\xc2\x58\x46\x7f\x75\x30\x7e\x16\x61\xdf\xe4\x61\x7d\x70\x3d\x18\x76\xb9\x76\x4c\x7d\x6b\xdf\xc5\xd5\xc5\x71\xac\x64\x1e\xbb\x4e\x7f\xe7\x7b\x1f\x01\x00\x00\xff\xff\x5a\xaa\xbe\xc0\x30\x02\x00\x00"

func starlycardmarketRead_collection_idsCdcBytes() ([]byte, error) {
	return bindataRead(
		_starlycardmarketRead_collection_idsCdc,
		"starlyCardMarket/read_collection_ids.cdc",
	)
}

func starlycardmarketRead_collection_idsCdc() (*asset, error) {
	bytes, err := starlycardmarketRead_collection_idsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "starlyCardMarket/read_collection_ids.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbe, 0x2c, 0xad, 0xcb, 0x75, 0x57, 0xf, 0x50, 0xf7, 0x22, 0x21, 0x10, 0xf2, 0xd9, 0x4f, 0xa, 0x6, 0x45, 0xa6, 0x4b, 0x74, 0xd, 0x74, 0x17, 0xd0, 0xb5, 0x56, 0x3b, 0x36, 0xc4, 0xdc, 0xf9}}
	return a, nil
}

var _starlycardmarketRead_collection_lengthCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x4f\x8f\xa2\x40\x10\xc5\xef\x24\x7c\x87\x17\x0f\xbb\x70\xc1\x3d\x9b\xdd\x35\x04\x3c\x98\x19\x33\x06\xbc\xcc\xb1\x69\x0a\xed\x4c\xd3\x4d\xba\x8b\xcc\x38\xc6\xef\x3e\x41\x8c\x1a\x33\x7f\xea\x44\x8a\x7a\xaf\xaa\x7f\x4f\xb5\x9d\x75\x8c\x92\x85\xd3\xfb\x4c\xb8\x7a\x25\xdc\x0b\x31\x1a\x67\x5b\xfc\x79\x2b\x37\x69\xf1\xf8\x9c\xa5\x45\xbe\x4a\x8b\x87\xc5\x26\xcd\xf3\x62\x51\x96\x61\x10\x06\xd3\x29\x36\x3b\xe5\xe1\xa5\x53\x1d\xc3\x11\xf7\xce\x78\xf0\x8e\xe0\xd5\x3b\xc1\x36\x10\x06\x42\x4a\xdb\x1b\xfe\xed\x51\x0a\x4d\x4f\x4d\x43\x0e\xd2\x6a\x4d\x92\x95\x35\xc9\x60\xd4\xf5\x15\x9a\xde\xa0\x15\xca\x44\xed\x69\x7d\x76\x99\x48\xeb\xda\x91\xf7\x33\x9c\x3f\xe2\x19\x96\x86\x71\x08\x03\x00\xd0\xc4\xb8\x57\x14\xd4\xe0\x1f\xb6\xc4\xe9\xb8\xfa\x2b\xcb\x78\xb4\x18\x2a\xd9\x12\x67\xa2\x13\x95\xd2\x8a\xf7\x7f\x7f\xdd\xd3\x48\xae\xe2\xc3\x37\xff\xd6\x7d\xa5\x95\x3c\xfe\x8f\xae\xce\xa7\xfa\x51\xb2\x16\xbc\xbb\x6a\x6e\x0f\xab\xac\x73\xf6\x35\xba\x69\xcd\xe7\xe8\x84\x51\x32\x9a\x64\xb6\xd7\x35\x8c\x65\x8c\x53\x67\x12\x37\x78\xc7\x14\xcf\x6d\x31\x3e\x7b\x12\x0f\xcc\x07\xa7\x31\xb1\xcf\xf8\x0d\x3c\x2e\x71\x2d\x73\x1f\xc5\x89\x26\xb3\x1d\x8e\x3c\x86\xc1\x47\x00\x00\x00\xff\xff\x2f\x5a\x25\xce\x33\x02\x00\x00"

func starlycardmarketRead_collection_lengthCdcBytes() ([]byte, error) {
	return bindataRead(
		_starlycardmarketRead_collection_lengthCdc,
		"starlyCardMarket/read_collection_length.cdc",
	)
}

func starlycardmarketRead_collection_lengthCdc() (*asset, error) {
	bytes, err := starlycardmarketRead_collection_lengthCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "starlyCardMarket/read_collection_length.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x80, 0x97, 0x56, 0xc2, 0x2e, 0x25, 0x45, 0x38, 0x19, 0x26, 0xc8, 0xc, 0xf, 0x98, 0x93, 0x1d, 0x6c, 0x79, 0xc5, 0x62, 0xfc, 0xcb, 0x60, 0x4e, 0x0, 0xd8, 0x69, 0xa9, 0x43, 0x8e, 0x7b, 0x51}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"flow/read_balance.cdc":                       flowRead_balanceCdc,
	"fusd/read_balance.cdc":                       fusdRead_balanceCdc,
	"fusd/read_supply.cdc":                        fusdRead_supplyCdc,
	"starlyCard/read_collection_ids.cdc":          starlycardRead_collection_idsCdc,
	"starlyCard/read_collection_length.cdc":       starlycardRead_collection_lengthCdc,
	"starlyCard/read_starly_id.cdc":               starlycardRead_starly_idCdc,
	"starlyCard/read_supply.cdc":                  starlycardRead_supplyCdc,
	"starlyCardMarket/read_collection_ids.cdc":    starlycardmarketRead_collection_idsCdc,
	"starlyCardMarket/read_collection_length.cdc": starlycardmarketRead_collection_lengthCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"flow": {nil, map[string]*bintree{
		"read_balance.cdc": {flowRead_balanceCdc, map[string]*bintree{}},
	}},
	"fusd": {nil, map[string]*bintree{
		"read_balance.cdc": {fusdRead_balanceCdc, map[string]*bintree{}},
		"read_supply.cdc": {fusdRead_supplyCdc, map[string]*bintree{}},
	}},
	"starlyCard": {nil, map[string]*bintree{
		"read_collection_ids.cdc": {starlycardRead_collection_idsCdc, map[string]*bintree{}},
		"read_collection_length.cdc": {starlycardRead_collection_lengthCdc, map[string]*bintree{}},
		"read_starly_id.cdc": {starlycardRead_starly_idCdc, map[string]*bintree{}},
		"read_supply.cdc": {starlycardRead_supplyCdc, map[string]*bintree{}},
	}},
	"starlyCardMarket": {nil, map[string]*bintree{
		"read_collection_ids.cdc": {starlycardmarketRead_collection_idsCdc, map[string]*bintree{}},
		"read_collection_length.cdc": {starlycardmarketRead_collection_lengthCdc, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
